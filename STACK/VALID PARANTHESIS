/*
 * Solution class to check if a given string contains valid parentheses.
 * 
 * Algorithm:
 * - Use a stack to track opening brackets.
 * - Iterate through the string:
 *   - If an opening bracket is found, push it onto the stack.
 *   - If a closing bracket is found, check if the stack is empty or if the popped element doesn't match the expected opening bracket.
 * - At the end, the stack should be empty for a valid expression.
 * 
 * Time Complexity: O(N) (where N is the length of the input string)
 * Space Complexity: O(N) (in the worst case, all characters are stored in the stack)
 */

import java.util.Stack;

class Solution {
    public boolean isValid(String st) {
        Stack<Character> s = new Stack<>();
        
        for (char c : st.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                s.push(c);
            } else {
                if (s.isEmpty() || (c == ')' && s.pop() != '(') ||
                    (c == '}' && s.pop() != '{') || (c == ']' && s.pop() != '[')) {
                    return false;
                }
            }
        }
        
        return s.isEmpty();
    }
}
