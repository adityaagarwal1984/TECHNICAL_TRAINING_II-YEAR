import java.util.Stack;

/**
 * This class implements a queue using two stacks. 
 * It supports the standard queue operations: push, pop, peek, and empty.
 */
class MyQueue {

    // Stack s1 will hold the elements of the queue
    Stack<Integer> s1 = new Stack<>();

    // Stack s2 will be used as a temporary stack for reversing the order of elements
    Stack<Integer> s2 = new Stack<>();

    /**
     * Pushes an element to the back of the queue.
     * @param x the element to be pushed onto the queue
     */
    public void push(int x) {
        // Move all elements from s1 to s2
        while (!s1.isEmpty()) {
            s2.push(s1.pop());
        }
        
        // Push the new element onto s1
        s1.push(x);
        
        // Move all elements back to s1
        while (!s2.isEmpty()) {
            s1.push(s2.pop());
        }
    }

    /**
     * Removes the element from the front of the queue and returns it.
     * @return the element at the front of the queue
     */
    public int pop() {
        return s1.pop();
    }

    /**
     * Retrieves, but does not remove, the element at the front of the queue.
     * @return the element at the front of the queue
     */
    public int peek() {
        return s1.peek();
    }

    /**
     * Checks if the queue is empty.
     * @return true if the queue is empty, false otherwise
     */
    public boolean empty() {
        return s1.isEmpty();
    }
}

/**
 * Example usage of the MyQueue class:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
