/**
 * Solution class to provide utility for matrix-related operations.
 * This class contains a method to compute the transpose of a given matrix.
 */
class Solution {

    /**
     * Computes the transpose of a given 2D matrix.
     * 
     * @param matrix The input matrix represented as a 2D array of integers.
     *               - The number of rows is `m`.
     *               - The number of columns is `n`.
     * @return A new 2D array containing the transpose of the input matrix. 
     *         - The resulting matrix will have dimensions `n x m`.
     * 
     * Time Complexity: O(m * n), where `m` is the number of rows 
     *                  and `n` is the number of columns in the input matrix.
     * Space Complexity: O(m * n), due to the storage for the transposed matrix.
     */
    public int[][] transpose(int[][] matrix) {
        // Get dimensions of the input matrix
        int m = matrix.length;       // Number of rows
        int n = matrix[0].length;    // Number of columns

        // Create a new matrix to store the transpose with dimensions `n x m`
        int[][] mat = new int[n][m];

        // Iterate through each element of the matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Assign the transposed value to the new matrix
                mat[j][i] = matrix[i][j];
            }
        }

        // Return the transposed matrix
        return mat;
    }
}
